// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"treasure/internal/rest/model"
)

// ServiceStateOKCode is the HTTP code returned for type ServiceStateOK
const ServiceStateOKCode int = 200

/*ServiceStateOK success 200

swagger:response serviceStateOK
*/
type ServiceStateOK struct {

	/*
	  In: Body
	*/
	Payload *model.State `json:"body,omitempty"`
}

// NewServiceStateOK creates ServiceStateOK with default headers values
func NewServiceStateOK() *ServiceStateOK {

	return &ServiceStateOK{}
}

// WithPayload adds the payload to the service state o k response
func (o *ServiceStateOK) WithPayload(payload *model.State) *ServiceStateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the service state o k response
func (o *ServiceStateOK) SetPayload(payload *model.State) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ServiceStateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ServiceStateServiceUnavailableCode is the HTTP code returned for type ServiceStateServiceUnavailable
const ServiceStateServiceUnavailableCode int = 503

/*ServiceStateServiceUnavailable service error

swagger:response serviceStateServiceUnavailable
*/
type ServiceStateServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *model.Error `json:"body,omitempty"`
}

// NewServiceStateServiceUnavailable creates ServiceStateServiceUnavailable with default headers values
func NewServiceStateServiceUnavailable() *ServiceStateServiceUnavailable {

	return &ServiceStateServiceUnavailable{}
}

// WithPayload adds the payload to the service state service unavailable response
func (o *ServiceStateServiceUnavailable) WithPayload(payload *model.Error) *ServiceStateServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the service state service unavailable response
func (o *ServiceStateServiceUnavailable) SetPayload(payload *model.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ServiceStateServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
